#!/usr/bin/env Rscript

suppressPackageStartupMessages({
  library(optparse)
  library(cli)
  library(imputeflow)
})

argv <- commandArgs(trailingOnly = TRUE)

if (length(argv) == 0 || argv[1] %in% c("-h", "--help")) {
  cat("
Usage: imputeflow <method> [options]

Methods:
  mean       Impute using column-wise mean
  median     Impute using column-wise median
  mode       Impute using column-wise mode
  knn        Impute using k-Nearest Neighbors
  drf        Impute using Distributed Random Forest (H2O)

Use --help with a method to see its options, e.g.:
  imputeflow mean --help
")
  quit(status = if (length(argv) == 0) 2 else 0)
}

method <- tolower(argv[1])
args   <- argv[-1]

run_mean <- function() {
  option_list <- list(
    make_option(c("-c", "--cols"), type = "character", default = NULL),
    make_option(c("--train-frac"), type = "double", default = 1.0),
    make_option(c("--seed"), type = "integer", default = 1),
    make_option(c("--round"), type = "integer", default = NA),
    make_option(c("--quiet"), action = "store_true", default = FALSE)
  )
  opt <- parse_args(OptionParser(option_list = option_list), args = args)
  cols <- if (!is.null(opt$cols)) strsplit(opt$cols, ",")[[1]] else NULL
  df <- imputeflow:::read_stdin_csv(verbose = !opt$quiet)
  out <- imputeflow::impute_mean(df, train_frac = opt$`train-frac`, seed = opt$seed)
  if (!is.na(opt$round)) {
    out <- imputeflow:::round_imputed_numerics(df, out, digits = opt$round)
  }
  imputeflow:::write_stdout_csv(out, verbose = !opt$quiet)
}

run_median <- function() {
  option_list <- list(
    make_option(c("-c", "--cols"), type = "character", default = NULL),
    make_option(c("--train-frac"), type = "double", default = 1.0),
    make_option(c("--seed"), type = "integer", default = 1),
    make_option(c("--round"), type = "integer", default = NA),
    make_option(c("--quiet"), action = "store_true", default = FALSE)
  )
  opt <- parse_args(OptionParser(option_list = option_list), args = args)
  cols <- if (!is.null(opt$cols)) strsplit(opt$cols, ",")[[1]] else NULL
  df <- imputeflow:::read_stdin_csv(verbose = !opt$quiet)
  out <- imputeflow::impute_median(df, train_frac = opt$`train-frac`, seed = opt$seed)
  if (!is.na(opt$round)) {
    out <- imputeflow:::round_imputed_numerics(df, out, digits = opt$round)
  }
  imputeflow:::write_stdout_csv(out, verbose = !opt$quiet)
}

run_mode <- function() {
  option_list <- list(
    make_option(c("-c", "--cols"), type = "character", default = NULL),
    make_option(c("--train-frac"), type = "double", default = 1.0),
    make_option(c("--seed"), type = "integer", default = 1),
    make_option(c("--round"), type = "integer", default = NA),
    make_option(c("--quiet"), action = "store_true", default = FALSE)
  )
  opt <- parse_args(OptionParser(option_list = option_list), args = args)
  cols <- if (!is.null(opt$cols)) strsplit(opt$cols, ",")[[1]] else NULL
  df <- imputeflow:::read_stdin_csv(verbose = !opt$quiet)
  out <- imputeflow::impute_mode(df, train_frac = opt$`train-frac`, seed = opt$seed)
  if (!is.na(opt$round)) {
    out <- imputeflow:::round_imputed_numerics(df, out, digits = opt$round)
  }
  imputeflow:::write_stdout_csv(out, verbose = !opt$quiet)
}

run_knn <- function() {
  option_list <- list(
    make_option(c("-c", "--cols"), type = "character", default = NULL),
    make_option(c("--neighbors"), type = "integer", default = 5),
    make_option(c("--train-frac"), type = "double", default = 1.0),
    make_option(c("--seed"), type = "integer", default = 1),
    make_option(c("--round"), type = "integer", default = NA),
    make_option(c("--quiet"), action = "store_true", default = FALSE)
  )
  opt <- parse_args(OptionParser(option_list = option_list), args = args)

  cols <- if (!is.null(opt$cols)) strsplit(opt$cols, ",")[[1]] else NULL

  #  Load input from stdin
  df <- imputeflow:::read_stdin_csv(verbose = !opt$quiet)

  #  Impute
  out <- imputeflow::impute_knn_recipes(
    df,
    cols = cols,
    neighbors = opt$neighbors,
    train_frac = opt$`train-frac`,
    seed = opt$seed
  )

  #  Apply rounding if requested
  if (!is.na(opt$round)) {
    out <- imputeflow:::round_imputed_numerics(df, out, digits = opt$round)
  }

  # Write to stdout â€” this is what was missing
  imputeflow:::write_stdout_csv(out, verbose = !opt$quiet)
}

run_drf <- function() {
  option_list <- list(
    make_option(c("-c", "--cols"), type = "character", default = NULL),
    make_option(c("--ntrees"), type = "integer", default = 50),
    make_option(c("--max-depth"), type = "integer", default = 10),
    make_option(c("--min-rows"), type = "integer", default = 5),
    make_option(c("--sample-rate"), type = "double", default = 0.8),
    make_option(c("--col-sample-rate-per-tree"), type = "double", default = 0.8),
    make_option(c("--balance-classes"), action = "store_true", default = FALSE),
    make_option(c("--train-frac"), type = "double", default = 1.0),
    make_option(c("--round"), type = "integer", default = NA),
    make_option(c("--seed"), type = "integer", default = 1),
    make_option(c("--fallback"), type = "character", default = "none"),
    make_option(c("--h2o-shutdown"), action = "store_true", default = FALSE),
    make_option(c("--quiet"), action = "store_true", default = FALSE)
  )
  opt <- parse_args(OptionParser(option_list = option_list), args = args)
  cols <- if (!is.null(opt$cols)) strsplit(opt$cols, ",")[[1]] else NULL
  df <- imputeflow:::read_stdin_csv(verbose = !opt$quiet)
  out <- imputeflow:::apply_imputation(df, "drf", cols = cols, opts = list(
    ntrees       = opt$ntrees,
    max_depth    = opt$`max-depth`,
    min_rows     = opt$`min-rows`,
    sample_rate  = opt$`sample-rate`,
    col_sample_rate_per_tree = opt$`col-sample-rate-per-tree`,
    balance_classes = opt$`balance-classes`,
    seed         = opt$seed,
    fallback     = opt$fallback,
    round_digits = opt$round,
    train_frac   = opt$`train-frac`,
    h2o_shutdown = opt$`h2o-shutdown`
  ), verbose = !opt$quiet)
  imputeflow:::write_stdout_csv(out, verbose = !opt$quiet)
  if (isTRUE(opt$`h2o-shutdown`)) {
    tryCatch(h2o::h2o.shutdown(prompt = FALSE), error = function(e) NULL)
  }
}

dispatch <- list(
  mean   = run_mean,
  median = run_median,
  mode   = run_mode,
  knn    = run_knn,
  drf    = run_drf
)

if (method %in% names(dispatch)) {
  dispatch[[method]]()
} else {
  cli::cli_alert_danger("Unknown method: {method}")
  quit(status = 2)
}